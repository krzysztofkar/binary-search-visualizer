{"version":3,"sources":["components/binarySearch.js","components/Board.js","components/App.js","index.js"],"names":["binarySearch","array","target","min","max","length","parseInt","i","guess","Math","floor","setTimeout","style","backgroundColor","id","alert","console","log","x","Board","useState","boxes","push","createBoxes","board","number","setNumber","className","onSubmit","e","preventDefault","document","querySelectorAll","placeholder","type","value","onChange","required","aria-required","onClick","window","location","reload","map","index","key","App","ReactDOM","render","querySelector"],"mappings":"uQAsCeA,G,KAtCM,SAACC,EAAOC,GAC3B,IAAIC,EAAM,EACNC,EAAMH,EAAMI,OAAS,EACzBH,EAASI,SAASJ,GAElB,IADA,IAAIK,EAAI,EAJ8B,aAMpC,IAAIC,EAAQC,KAAKC,OAAOP,EAAMC,GAAO,GAKrC,GAJAO,YAAW,WACTV,EAAMO,GAAOI,MAAMC,gBAAkB,QACpC,IAAON,GACVA,IACIL,GAAUD,EAAMO,GAAOM,GAOzB,OANAH,YAAW,WACTV,EAAMO,GAAOI,MAAMC,gBAAkB,QACrCF,YAAW,WACTI,MAAM,6BAA+BP,KACpC,MACF,IAAOD,GACJ,CAAN,EAAOS,QAAQC,IAAI,6BAA+BT,IAC7C,GAAIN,EAASD,EAAMO,GAAOM,GAAI,CACnC,IADoC,IAAD,WAC1BI,GACPP,YAAW,WACTV,EAAMiB,GAAGN,MAAMC,gBAAkB,SAChC,IAAON,IAHHW,EAAI,EAAGA,EAAIjB,EAAMO,GAAOM,GAAII,IAAM,EAAlCA,GAKTf,EAAMK,EAAQ,OACT,GAAIN,EAASD,EAAMO,GAAOM,GAAI,CACnC,IADoC,IAAD,WAC1BI,GACPP,YAAW,WACTV,EAAMiB,GAAGN,MAAMC,gBAAkB,SAChC,IAAON,IAHHW,EAAIjB,EAAMO,GAAOM,GAAK,EAAGI,GAAKjB,EAAMI,OAAS,EAAGa,IAAM,EAAtDA,GAKTd,EAAMI,EAAQ,IA3BXL,GAAOC,GAAK,CAAC,IAAD,wCA8BnB,MAAO,oCC6BMe,EApDD,WAAO,IAAD,EACJC,mBATI,WAElB,IADA,IAAMC,EAAQ,GACLd,EAAI,EAAGA,GAAK,IAAKA,IACxBc,EAAMC,KAAKf,GAEb,OAAOc,EAIgBE,IAAlBC,EADa,sBAEUJ,mBAAS,IAFnB,mBAEXK,EAFW,KAEHC,EAFG,KAUlB,OACE,yBAAKC,UAAU,aACb,yBAAKA,UAAU,OACb,0BAAMC,SATS,SAAAC,GACnBA,EAAEC,iBACF,IAAMT,EAAQU,SAASC,iBAAiB,QACxChC,EAAaqB,EAAOI,KAOd,yBAAKE,UAAU,+BACb,2BACEb,GAAG,SACHmB,YAAY,mBACZC,KAAK,SACLP,UAAU,WACVQ,MAAOV,EACPW,SAAU,SAAAP,GAAC,OAAIH,EAAUG,EAAE3B,OAAOiC,QAClCE,SAAS,IACTC,gBAAc,OACdnC,IAAI,IACJC,IAAI,SAGR,4BAAQuB,UAAU,+BAA+BO,KAAK,UAAtD,uBAIF,4BACEP,UAAU,sCACVY,QAAS,kBAAMC,OAAOC,SAASC,WAFjC,gBAOF,yBAAKf,UAAU,aACZH,EAAMmB,KAAI,SAAClB,EAAQmB,GAClB,OACE,yBAAKjB,UAAU,MAAMkB,IAAKpB,EAAQX,GAAIW,GACpC,8BAAOA,UCpCNqB,G,MAfH,WACV,OACE,yBAAKnB,UAAU,OACb,yBAAKA,UAAU,SAAf,+CACA,yBAAKA,UAAU,QAAf,4DAEE,6BAFF,mDAGkD,6BAHlD,sEAMA,kBAAC,EAAD,SCVNoB,IAASC,OAAO,kBAAC,EAAD,MAASjB,SAASkB,cAAc,Y","file":"static/js/main.a5deb325.chunk.js","sourcesContent":["const binarySearch = (array, target) => {\n  let min = 0;\n  let max = array.length - 1;\n  target = parseInt(target);\n  let i = 1;\n  while (min <= max) {\n    let guess = Math.floor((min + max) / 2);\n    setTimeout(() => {\n      array[guess].style.backgroundColor = \"red\";\n    }, 1000 * i);\n    i++;\n    if (target == array[guess].id) {\n      setTimeout(() => {\n        array[guess].style.backgroundColor = \"green\";\n        setTimeout(() => {\n          alert(\"Target was found at index \" + guess);\n        }, 10);\n      }, 1000 * i);\n      return console.log(\"Target was found at index \" + guess);\n    } else if (target > array[guess].id) {\n      for (let x = 0; x < array[guess].id; x++) {\n        setTimeout(() => {\n          array[x].style.backgroundColor = \"grey\";\n        }, 1000 * i);\n      }\n      min = guess + 1;\n    } else if (target < array[guess].id) {\n      for (let x = array[guess].id - 1; x <= array.length - 1; x++) {\n        setTimeout(() => {\n          array[x].style.backgroundColor = \"grey\";\n        }, 1000 * i);\n      }\n      max = guess - 1;\n    }\n  }\n  return \"Target value not found in array\";\n};\n\nexport default binarySearch;\n","import React, { useState } from \"react\";\nimport \"./Board.css\";\nimport binarySearch from \"./binarySearch\";\n\nconst createBoxes = () => {\n  const boxes = [];\n  for (let i = 1; i <= 100; i++) {\n    boxes.push(i);\n  }\n  return boxes;\n};\n\nconst Board = () => {\n  let [board] = useState(createBoxes());\n  const [number, setNumber] = useState(\"\");\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const boxes = document.querySelectorAll(\".box\");\n    binarySearch(boxes, number);\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        <form onSubmit={handleSubmit}>\n          <div className=\"input-field col l12 m12 s12\">\n            <input\n              id=\"number\"\n              placeholder=\"Provide a number\"\n              type=\"number\"\n              className=\"validate\"\n              value={number}\n              onChange={e => setNumber(e.target.value)}\n              required=\"1\"\n              aria-required=\"true\"\n              min=\"1\"\n              max=\"100\"\n            />\n          </div>\n          <button className=\"waves-effect waves-light btn\" type=\"submit\">\n            Show binary search\n          </button>\n        </form>\n        <button\n          className=\"waves-effect waves-light btn button\"\n          onClick={() => window.location.reload()}\n        >\n          Reset board\n        </button>\n      </div>\n      <div className=\"container\">\n        {board.map((number, index) => {\n          return (\n            <div className=\"box\" key={number} id={number}>\n              <span>{number}</span>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Board;\n","import React from \"react\";\nimport Board from \"./Board\";\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <div className=\"app\">\n      <div className=\"title\">Application for binary search visualization</div>\n      <div className=\"desc\">\n        On each step application makes a guess and colors it red.\n        <br />\n        Then, it colors all the impossible values grey. <br />\n        When the value is found it colors it green and displays a message.\n      </div>\n      <Board />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\n\nReactDOM.render(<App />, document.querySelector(\"#root\"));\n"],"sourceRoot":""}